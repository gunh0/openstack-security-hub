{
    "swagger": "2.0",
    "info": {
        "description": "API server for OpenStack security checking",
        "title": "OpenStack Security Hub API",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/check/dashboard-01": {
            "get": {
                "description": "Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user ownership of such critical configuration files must be set to root and group ownership must be set to horizon.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Is user/group ownership of config files set to root/horizon?Is user/group of config files set to root/horizon?",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checklist.CheckResult"
                            }
                        }
                    }
                }
            }
        },
        "/check/dashboard-04": {
            "get": {
                "description": "CSRF (Cross-site request forgery) is an attack which forces an end user to execute unauthorized commands on a web application in which he/she is currently authenticated. A successful CSRF exploit can compromise end user data and operations. If the targeted end user has admin privileges, this can compromise the entire web application.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Is CSRF_COOKIE_SECURE parameter set to True?",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checklist.CheckResult"
                            }
                        }
                    }
                }
            }
        },
        "/check/dashboard-05": {
            "get": {
                "description": "The “SECURE” cookie attribute instructs web browsers to only send the cookie through an encrypted HTTPS (SSL/TLS) connection. This session protection mechanism is mandatory to prevent the disclosure of the session ID through MitM (Man-in-the-Middle) attacks. It ensures that an attacker cannot simply capture the session ID from web browser traffic.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Is SESSION_COOKIE_SECURE parameter set to True?",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checklist.CheckResult"
                            }
                        }
                    }
                }
            }
        },
        "/check/dashboard-06": {
            "get": {
                "description": "The “HTTPONLY” cookie attribute instructs web browsers not to allow scripts (e.g. JavaScript or VBscript) an ability to access the cookies via the DOM document.cookie object. This session ID protection is mandatory to prevent session ID stealing through XSS attacks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Is SESSION_COOKIE_HTTPONLY parameter set to True?",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checklist.CheckResult"
                            }
                        }
                    }
                }
            }
        },
        "/check/identity-01": {
            "get": {
                "description": "Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user and group ownership of such critical configuration files must be set to that component owner. Additionally, the containing directory should have the same ownership to ensure that new files are owned correctly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identity"
                ],
                "summary": "Is user/group ownership of config files set to keystone?",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checklist.CheckResult"
                            }
                        }
                    }
                }
            }
        },
        "/check/identity-01-01": {
            "get": {
                "description": "Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user and group ownership of such critical configuration files must be set to that component owner. Additionally, the containing directory should have the same ownership to ensure that new files are owned correctly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identity"
                ],
                "summary": "Is user/group ownership of config files set to keystone? (/etc/keystone/keystone.conf)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checklist.CheckResult"
                        }
                    }
                }
            }
        },
        "/check/identity-01-02": {
            "get": {
                "description": "Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user and group ownership of such critical configuration files must be set to that component owner. Additionally, the containing directory should have the same ownership to ensure that new files are owned correctly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identity"
                ],
                "summary": "Run Identity-01-02 (/etc/keystone/keystone-paste.ini)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checklist.CheckResult"
                        }
                    }
                }
            }
        },
        "/check/key-manager-01-01": {
            "get": {
                "description": "Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally, modifies or deletes any of the parameters or the file itself then it would cause severe availability issues resulting in a denial of service to the other end users. User ownership of such critical configuration files must be set to root and group ownership must be set to barbican. Additionally, the containing directory should have the same ownership to ensure that new files are owned correctly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets Management"
                ],
                "summary": "Is the ownership of config files set to root/barbican? (/etc/barbican/barbican.conf)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checklist.CheckResult"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check if the API server is running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {}
            }
        }
    },
    "definitions": {
        "checklist.CheckResult": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    }
}